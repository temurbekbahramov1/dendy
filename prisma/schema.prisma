// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String   @id @default(cuid())
  name        String
  nameUz      String
  nameRu      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       FoodItem[]
}

model FoodItem {
  id          String   @id @default(cuid())
  name        String
  nameUz      String
  nameRu      String
  description String?
  price       Float
  discountedPrice Float?
  image       String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  isAvailable Boolean  @default(true)
  isSpecial   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Order {
  id          String      @id @default(cuid())
  customerName String?
  customerPhone String?
  customerAddress String?
  totalPrice  Float
  status      OrderStatus @default(PENDING)
  paymentMethod PaymentMethod @default(CASH)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  order     Order  @relation(fields: [orderId], references: [id])
  itemId    String
  item      FoodItem @relation(fields: [itemId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
}

model CartItem {
  id        String   @id @default(cuid())
  sessionId String
  itemId    String
  item      FoodItem @relation(fields: [itemId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
}